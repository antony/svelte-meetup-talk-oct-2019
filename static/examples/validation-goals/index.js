/* App.svelte generated by Svelte v3.12.1 */
import {
	SvelteComponent,
	append,
	attr,
	component_subscribe,
	detach,
	element,
	empty,
	init,
	insert,
	listen,
	noop,
	safe_not_equal,
	set_data,
	set_input_value,
	space,
	text,
	toggle_class
} from "svelte/internal";
import { emailValidator, requiredValidator } from "./validators.js.js"
import createValidator from "./validate.js.js"

// (20:1) {#if $emailValidity.dirty}
function create_if_block(ctx) {
	var if_block_anchor;

	function select_block_type(changed, ctx) {
		if (ctx.$emailValidity.valid) return create_if_block_1;
		return create_else_block;
	}

	var current_block_type = select_block_type(null, ctx);
	var if_block = current_block_type(ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},

		m(target, anchor) {
			if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},

		p(changed, ctx) {
			if (current_block_type === (current_block_type = select_block_type(changed, ctx)) && if_block) {
				if_block.p(changed, ctx);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);
				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},

		d(detaching) {
			if_block.d(detaching);

			if (detaching) {
				detach(if_block_anchor);
			}
		}
	};
}

// (23:2) {:else}
function create_else_block(ctx) {
	var t0, t1_value = ctx.$emailValidity.message + "", t1;

	return {
		c() {
			t0 = text("INVALID - ");
			t1 = text(t1_value);
		},

		m(target, anchor) {
			insert(target, t0, anchor);
			insert(target, t1, anchor);
		},

		p(changed, ctx) {
			if ((changed.$emailValidity) && t1_value !== (t1_value = ctx.$emailValidity.message + "")) {
				set_data(t1, t1_value);
			}
		},

		d(detaching) {
			if (detaching) {
				detach(t0);
				detach(t1);
			}
		}
	};
}

// (21:2) {#if $emailValidity.valid}
function create_if_block_1(ctx) {
	var t;

	return {
		c() {
			t = text("VALID :)");
		},

		m(target, anchor) {
			insert(target, t, anchor);
		},

		p: noop,

		d(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

function create_fragment(ctx) {
	var input, validateEmailField_action, t0, button, t1, button_disabled_value, t2, span, dispose;

	var if_block = (ctx.$emailValidity.dirty) && create_if_block(ctx);

	return {
		c() {
			input = element("input");
			t0 = space();
			button = element("button");
			t1 = text("Ok, I'm ready!");
			t2 = space();
			span = element("span");
			if (if_block) if_block.c();
			attr(input, "class", "input");
			attr(input, "type", "text");
			attr(input, "placeholder", "Your Email");
			button.disabled = button_disabled_value = !ctx.$emailValidity.valid;
			attr(span, "class", "svelte-1wlob38");
			toggle_class(span, "is-danger", !ctx.$emailValidity.valid);
			toggle_class(span, "is-success", ctx.$emailValidity.valid);
			dispose = listen(input, "input", ctx.input_input_handler);
		},

		m(target, anchor) {
			insert(target, input, anchor);

			set_input_value(input, ctx.email);

			validateEmailField_action = ctx.validateEmailField.call(null, input) || {};
			insert(target, t0, anchor);
			insert(target, button, anchor);
			append(button, t1);
			insert(target, t2, anchor);
			insert(target, span, anchor);
			if (if_block) if_block.m(span, null);
		},

		p(changed, ctx) {
			if (changed.email && (input.value !== ctx.email)) set_input_value(input, ctx.email);

			if ((changed.$emailValidity) && button_disabled_value !== (button_disabled_value = !ctx.$emailValidity.valid)) {
				button.disabled = button_disabled_value;
			}

			if (ctx.$emailValidity.dirty) {
				if (if_block) {
					if_block.p(changed, ctx);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(span, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (changed.$emailValidity) {
				toggle_class(span, "is-danger", !ctx.$emailValidity.valid);
				toggle_class(span, "is-success", ctx.$emailValidity.valid);
			}
		},

		i: noop,
		o: noop,

		d(detaching) {
			if (detaching) {
				detach(input);
			}

			if (validateEmailField_action && typeof validateEmailField_action.destroy === 'function') validateEmailField_action.destroy();

			if (detaching) {
				detach(t0);
				detach(button);
				detach(t2);
				detach(span);
			}

			if (if_block) if_block.d();
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $emailValidity;

	

  const [ emailValidity, validateEmailField ] = createValidator(requiredValidator(), emailValidator()); component_subscribe($$self, emailValidity, $$value => { $emailValidity = $$value; $$invalidate('$emailValidity', $emailValidity) })
	
	let email = null

	function input_input_handler() {
		email = this.value;
		$$invalidate('email', email);
	}

	return {
		emailValidity,
		validateEmailField,
		email,
		$emailValidity,
		input_input_handler
	};
}

class App extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, []);
	}
}

export default App;